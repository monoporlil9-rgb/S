require('dotenv').config();
const express = require('express');
const compression = require('compression');
const cacheService = require('./services/cacheService');
const fileManager = require('./utils/fileManager');

const app = express();
const PORT = process.env.PORT || 3000;

app.use(compression());
app.use(express.json({ limit: '10mb' }));

fileManager.ensureCacheDirectory();

app.get('/', (req, res) => {
  res.json({
    message: 'Cache Proxy Server',
    endpoints: {
      '/cache': 'POST - Cache a file',
      '/download/:id': 'GET - Download cached file',
      '/stats': 'GET - Get cache statistics'
    }
  });
});

app.post('/cache', async (req, res) => {
  try {
    const { url } = req.body;
    if (!url) {
      return res.status(400).json({ success: false, error: 'URL is required' });
    }
    const result = await cacheService.cacheFile(url);
    res.json(result);
  } catch (error) {
    console.error('Cache error:', error);
    res.status(500).json({ success: false, error: error.message });
  }
});

app.get('/download/:id', async (req, res) => {
  try {
    const result = await cacheService.downloadFile(req.params.id);
    if (!result.success) {
      return res.status(404).json(result);
    }
    res.setHeader('Content-Type', result.mimeType);
    res.setHeader('Content-Disposition', `attachment; filename="${result.fileName}"`);
    res.sendFile(result.filePath);
  } catch (error) {
    console.error('Download error:', error);
    res.status(500).json({ success: false, error: error.message });
  }
});

app.get('/stats', async (req, res) => {
  try {
    const stats = await cacheService.getStats();
    res.json(stats);
  } catch (error) {
    console.error('Stats error:', error);
    res.status(500).json({ success: false, error: error.message });
  }
});

app.listen(PORT, () => {
  console.log(`Cache Proxy Server running on port ${PORT}`);
  console.log(`Cache directory: ${fileManager.getCacheDir()}`);
  console.log(`Max cache size: ${fileManager.MAX_CACHE_SIZE_MB} MB`);
});
